# -*- coding: utf-8 -*

import json
import urllib
import urllib2
import re
import datetime

# URLs
CRM_URL = "https://playercrm.ssl.eurosport.com/JsonPlayerCrmApi.svc/"
CRM_LOGIN = CRM_URL + "Login"

VIDEO_URL = "http://videoshop.ext.eurosport.com/JsonProductService.svc/"
VIDEO_PRODUCTS = VIDEO_URL + "GetAllProductsByDeviceMobile"

VERSION = 1

login_data = {"email":"", "password":"", "udid":"f87a17a2-8040-11e3-ab56-fabae5af4ba6"}
context = {"v":"1",
        "s":"1",
        "d":4,
        "b":"Plex",
        "ma":"MrsnugglyBottom",
        "p":"1",
        "mn":"Snugglyman",
        "mi":"- Plugin version: %s" % VERSION,
        "osn":"Android",
        "osv":"4.3",
        "ap":18,
        "tt":"pad",
        "di":"dimension:=1920x1128,density=300.00x300.00,scale=1.00x1.00",
        "l:":"7",
        "g":"se"
        }

def get_products():
    user_ref = ep_login()

    dvs = {"userid": user_ref["Id"],
            "hkey": user_ref["Hkey"],
            "languageid": 7,
            "isbroadcasted" : 1,
            "isfullaccess" : 0
            }
    encoded = urllib.urlencode({"data": json.dumps(dvs), "context" : json.dumps(context)})
    channelsUrl = VIDEO_PRODUCTS + "?" + encoded
    products = JSON.ObjectFromURL(channelsUrl)
    return products

def find_current_show(channel):
    now = datetime.datetime.now()

    if channel["tvschedules"]:
        for s in channel["tvschedules"]:
            endtime = convert_date(s["enddate"]["datetime"])
            starttime = convert_date(s["startdate"]["datetime"])
            if now < endtime and now >= starttime:
                return s
    elif channel["tvscheduleliveevents"]:
        for s in channel["tvscheduleliveevents"]:
            endtime = convert_date(s["enddate"]["datetime"])
            starttime = convert_date(s["startdate"]["datetime"])
            if now < endtime and now >= starttime:
                return s
    return None

date_regex = re.compile("Date\(([0-9]*?)\+([0-9]*?)\)")
def convert_date(dateString):
    r = date_regex.search(dateString)
    (time, offset) = r.groups()
    time = int(time)
    time = time / 1000
    return datetime.datetime.fromtimestamp(time)

def ep_login():
    Log(Prefs["username"])
    Log(Prefs["password"])

    login_data["email"] = Prefs["username"]
    login_data["password"] = Prefs["password"]

    encodedData = urllib.urlencode({"data": json.dumps(login_data), "context" : json.dumps(context)})
    loginUrl = CRM_LOGIN + "?" + encodedData

    j = JSON.ObjectFromURL(loginUrl)
    Log(j)

    return j


